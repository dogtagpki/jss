name: PKI Tests

on: [push, pull_request]

jobs:
  init:
    name: Initialization
    uses: ./.github/workflows/init.yml
    secrets: inherit

  build:
    name: Waiting for build
    needs: init
    runs-on: ubuntu-latest
    env:
      COPR_REPO: "@pki/10"
    steps:
      - name: Wait for build
        uses: lewagon/wait-on-check-action@v1.2.0
        with:
          ref: ${{ github.ref }}
          check-name: 'Building JSS'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
        if: github.event_name == 'push'

      - name: Wait for build
        uses: lewagon/wait-on-check-action@v1.2.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: 'Building JSS'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
        if: github.event_name == 'pull_request'

  pki-build-test:
    name: Building PKI
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/jss
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Retrieve jss-runner image
        uses: actions/cache@v3
        with:
          key: jss-runner-${{ github.sha }}
          path: jss-runner.tar

      - name: Load jss-runner image
        run: docker load --input jss-runner.tar

      - name: Run container
        run: |
          IMAGE=jss-runner \
          NAME=pki \
          HOSTNAME=pki.example.com \
          tests/bin/runner-init.sh

      - name: Build PKI
        run: |
          docker exec pki dnf install -y git dnf-plugins-core rpm-build
          docker exec pki git clone \
              -b v10 \
              --single-branch \
              https://github.com/dogtagpki/pki
          docker exec pki dnf build-dep -y --spec pki/pki.spec
          docker exec pki pki/build.sh --with-timestamp --with-commit-id rpm
          docker exec pki bash -c "dnf install -y /root/build/pki/RPMS/*.rpm"

  ca-test:
    name: Installing CA
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/jss
      COPR_REPO: "@pki/10.12"
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Retrieve jss-runner image
        uses: actions/cache@v3
        with:
          key: jss-runner-${{ github.sha }}
          path: jss-runner.tar

      - name: Load jss-runner image
        run: docker load --input jss-runner.tar

      - name: Run container
        run: |
          IMAGE=jss-runner \
          NAME=pki \
          HOSTNAME=pki.example.com \
          tests/bin/runner-init.sh

      - name: Install DS and PKI packages
        run: docker exec pki dnf install -y 389-ds-base pki-ca

      - name: Install DS
        run: docker exec pki ${SHARED}/tests/bin/ds-create.sh

      - name: Install CA
        run: docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/ca.cfg -s CA -v

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --debug

      - name: Verify CA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password-file /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh pki
          tests/bin/pki-artifacts-save.sh pki

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS
        run: docker exec pki ${SHARED}/tests/bin/ds-remove.sh

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ca
          path: |
            /tmp/artifacts/pki
